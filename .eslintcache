[{"/home/administrator/dev/demo0/src/App.js":"1","/home/administrator/dev/demo0/src/index.js":"2","/home/administrator/dev/demo0/src/reportWebVitals.js":"3","/home/administrator/dev/demo0/src/Tasks.js":"4","/home/administrator/dev/demo0/src/Projects.js":"5"},{"size":5261,"mtime":1606919623500,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1606730782644,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1606730782644,"results":"9","hashOfConfig":"7"},{"size":8384,"mtime":1606916858237,"results":"10","hashOfConfig":"7"},{"size":7209,"mtime":1606902901930,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"tnrwql",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/administrator/dev/demo0/src/App.js",["25","26","27","28","29","30"],"/home/administrator/dev/demo0/src/index.js",[],["31","32"],"/home/administrator/dev/demo0/src/reportWebVitals.js",[],["33","34"],"/home/administrator/dev/demo0/src/Tasks.js",["35","36","37","38","39","40","41","42","43","44"],"import React, { useState, useEffect, useRef } from 'react';\nimport { Formik, useFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport { Button, Container, Row, Col } from 'react-bootstrap';\nimport { Form as BSForm } from 'react-bootstrap';\n\n// const App2 = props => {\nfunction Tasks(props) {\n\n    const [openTasks,setOpenTasks] = useState(3);\n    const [done,setDone]           = useState(Array(3).fill(false));\n    const [tasks,setTasks]         = useState(Array(3).fill(null));\n\n\n    useEffect( function onRender() {\n      document.title = `${openTasks} Aufgaben offen`;\n      return function cleanup() {}\n    } );\n    /*\n    useEffect( function onRender() {\n      document.title = `${openTasks} Aufgaben offen`;\n    } );\n    */\n    const toggleState = taskID => {\n      done[taskID] = !done[taskID];\n      setDone(done);\n      setOpenTasks(openTasks + ( done[taskID] ? -1 : 1 ) );\n    };\n\n    const handleNewTask = (newTask) => {\n      tasks.push(newTask);\n      setTasks(tasks);\n      setOpenTasks(openTasks + 1);\n      done.push(false);\n      setDone(done);\n    };\n\n    return (\n      <ErrorBoundary\n        done={done}\n        toggleState={toggleState}\n        tasks={tasks}\n        handleNewTask={handleNewTask}\n        openTasks={openTasks}\n        />\n    );\n}\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div> Error! </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <h1>ToDos ({this.props.openTasks} offen)</h1>\n          <TaskList\n            done={this.props.done}\n            toggleState={this.props.toggleState}\n            tasks={this.props.tasks}\n          />\n          <NewTask \n            handleNewTask={this.props.handleNewTask}\n          />\n        </React.Fragment>\n      );\n/*\n      return (\n        <React.Fragment>\n          <h1>ToDos ({this.props.openTasks} offen)</h1>\n          { dynamicList(Task,\"tasks\") }\n          <NewTask \n            handleNewTask={this.props.handleNewTask}\n          />\n        </React.Fragment>\n*/\n    }\n  }\n  componentDidCatch(error,errorInfo) {\n    this.state = { hasError: true };\n  }\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n}\n\n\nclass ErrorBoundaryIdeal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n  render() {\n    return (\n      <TaskList { ...this.props } />\n    );\n  }\n  componentDidCatch(error,errorInfo) {\n    this.state = { hasError: true };\n  }\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n}\n\n\n/*\nclass ToDo {\n  description;\n  dueDate;\n  isDone;\n}\n*/\n\n\nfunction dynamicList(Component,listName) {\n  \n//  const {listName,maxSize,usePagination,...childProps} = props;\n\n  return ( (props) => {\n    const children = props[listName].map( (elem,elemID) => {\n      return (\n        <Component {...props}  elemID={elemID} />\n      );\n    });\n\n    return (<ul> {children} </ul>);\n  });\n}\n\nfunction DynamicList(Component,listName) {\n  \n//  const {listName,maxSize,usePagination,...childProps} = props;\n\n  return ( (props) => {\n\n    const children = props[listName].map( (elem,elemID) => {\n      \n      const comp = new Component();\n      comp.props = props;\n      comp.props.elemID = elemID;\n      return comp.render();\n    });\n\n    return (<ul> {children} </ul>);\n  });\n}\n\nfunction TaskList(props) {\n  const tasks = props.tasks.map( (task,taskID) => {\n    return (\n      <Task taskID       = { taskID }\n            done         = { props.done[taskID] }\n            clickHandler = { () => { props.toggleState(taskID) } } />\n    );\n  });\n\n  return (\n    <Container>\n      {tasks}\n    </Container>\n  );\n}\n\nfunction Task(props) {\n    const isChecked    = props.done ? \"checked\" : \"\";\n    return (\n      <Row>\n        <Col>\n          {props.taskID}\n        </Col>  \n        <Col>\n          <label>\n            <BSForm.Check checked={isChecked} onClick={props.clickHandler} />\n          </label>\n        </Col>\n        <Col>\n          <span>Aufgabe</span>\n        </Col>\n      </Row>\n    );\n}\n\n\nfunction NewTask2(props) {\n\n  const MyInput = React.forwardRef( (props,ref) => {\n    return <NewTaskInput />\n  });\n\n  const inputRef = useRef(null);\n\n\n  return (\n    <footer>\n      <MyInput />\n      <NewTaskButton input={inputRef} handleNewTask={ props.handleNewTask } />\n    </footer>\n  );\n}\n\nfunction NewTaskInput(props) {\n\n  return (\n      <label>\n      Neu:\n        <input type=\"text\" />\n      </label>\n  );\n}\n\nfunction NewTaskButton(props) {\n \n  useEffect( () => \n    { console.log(props.input); }\n  );\n\n  // const currentText = props.input.current.value;\n  const currentText = \"\";\n\n  return (    \n      <button onClick={ () => props.handleNewTask(currentText) } >+</button>\n  );\n}\n\n\n\nfunction NewTask3(props) {\n\n  const validate = (values) => {\n    const errors = {};\n    if (values.todoName.length < 6) {\n      errors.todoName = 'Name zu kurz';\n    }\n    if (!/^[a-zA-Z]*$/i.test(values.todoName)) {\n      errors.somethingRandom = 'Darf nur aus Buchstaben bestehen';\n    }\n    return errors;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      todoName: \"\",\n    },\n    validate,\n    onSubmit: (values) => {\n      props.handleNewTask(values.todoName);\n    },\n  });\n\n  return (\n    <form onSubmit={ formik.handleSubmit } >\n      <label>\n      { formik.errors.todoName\n        ? <div class=\"error\"> { formik.errors.todoName } </div>\n        : null\n      }\n      { formik.errors.somethingRandom\n        ? <div class=\"error\"> { formik.errors.somethingRandom } </div>\n        : null\n      }\n      Neu:\n        <input type=\"text\"\n               name=\"todoName\"\n               value={ formik.values.todoName }\n               onChange={ formik.handleChange }\n               onBlur={ formik.handleBlur }/>\n      </label>\n      <button type=\"submit\">+</button>\n    </form>\n  );\n}\n\nfunction NewTask4(props) {\n\n  const formik = useFormik({\n    initialValues: {\n      todoName: \"\",\n    },\n    validationSchema: Yup.object({\n      todoName: Yup.string().min(7,'Zu kurz').required('muss angegeben werden'),\n    }),\n    onSubmit: (values) => {\n      props.handleNewTask(values.todoName);\n    },\n  });\n\n  return (\n    <form onSubmit={ formik.handleSubmit } >\n      <label>\n      { formik.touched.todoName && formik.errors.todoName\n        ? <div class=\"error\"> { formik.errors.todoName } </div>\n        : null\n      }\n      Neu:\n        <input { ...formik.getFieldProps('todoName') } />\n      </label>\n      <button type=\"submit\">+</button>\n    </form>\n  );\n}\n\nfunction NewTask5(props) {\n\n  // throw new Error('bang');\n\n  return (\n    <Formik\n      initialValues= { {\n         todoName: \"\",\n        }}\n      validationSchema= {\n        Yup.object({\n          todoName: Yup.string().min(7,'Zu kurz').required('muss angegeben werden'),\n        }) }\n      onSubmit= {\n        (values) => { props.handleNewTask(values.todoName); }\n      }\n    >\n    { formik => (\n        <Form>\n          <div class=\"error\">\n            <ErrorMessage name=\"todoName\"/>\n          </div>\n          <BSForm.Label htmlForm=\"todoName\">Neu:</BSForm.Label>\n          <Field name=\"todoName\" type=\"text\" />\n          <Button variant='primary' type=\"submit\">+</Button>\n        </Form>\n    ) }\n    </Formik>\n  );\n}\n\nfunction NewTask(props) {\n  const formik = useFormik({\n    initialValues: {\n      todoName: \"\",\n    },\n    validationSchema: Yup.object({\n      todoName: Yup.string().min(7,'Zu kurz').required('muss angegeben werden'),\n    }),\n    onSubmit: (values) => {\n      props.handleNewTask(values.todoName);\n    },\n  });\n\n  return (\n    <Container>\n      <Row>\n        <Col>\n          <BSForm onSubmit={ formik.handleSubmit } >\n          <BSForm.Group>\n            <BSForm.Label>\n            { formik.touched.todoName && formik.errors.todoName\n              ? <div class=\"error\"> { formik.errors.todoName } </div>\n              : null\n            }\n            Neu:\n            </BSForm.Label>\n            <BSForm.Control { ...formik.getFieldProps('todoName') } />\n          </BSForm.Group>\n          <Button type=\"submit\">+</Button>\n          </BSForm>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport { Task, NewTask, Tasks };\n\n","/home/administrator/dev/demo0/src/Projects.js",["45","46","47","48","49","50","51","52","53"],{"ruleId":"54","severity":1,"message":"55","line":2,"column":8,"nodeType":"56","messageId":"57","endLine":2,"endColumn":17},{"ruleId":"54","severity":1,"message":"58","line":6,"column":10,"nodeType":"56","messageId":"57","endLine":6,"endColumn":16},{"ruleId":"54","severity":1,"message":"59","line":6,"column":18,"nodeType":"56","messageId":"57","endLine":6,"endColumn":27},{"ruleId":"54","severity":1,"message":"60","line":6,"column":29,"nodeType":"56","messageId":"57","endLine":6,"endColumn":32},{"ruleId":"54","severity":1,"message":"61","line":6,"column":34,"nodeType":"56","messageId":"57","endLine":6,"endColumn":37},{"ruleId":"54","severity":1,"message":"62","line":85,"column":9,"nodeType":"56","messageId":"57","endLine":85,"endColumn":14},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"63","replacedBy":"67"},{"ruleId":"65","replacedBy":"68"},{"ruleId":"54","severity":1,"message":"55","line":4,"column":8,"nodeType":"56","messageId":"57","endLine":4,"endColumn":17},{"ruleId":"69","severity":1,"message":"70","line":90,"column":5,"nodeType":"71","endLine":90,"endColumn":9},{"ruleId":"54","severity":1,"message":"72","line":98,"column":7,"nodeType":"56","messageId":"57","endLine":98,"endColumn":25},{"ruleId":"69","severity":1,"message":"70","line":111,"column":5,"nodeType":"71","endLine":111,"endColumn":9},{"ruleId":"54","severity":1,"message":"73","line":128,"column":10,"nodeType":"56","messageId":"57","endLine":128,"endColumn":21},{"ruleId":"54","severity":1,"message":"74","line":143,"column":10,"nodeType":"56","messageId":"57","endLine":143,"endColumn":21},{"ruleId":"54","severity":1,"message":"75","line":197,"column":10,"nodeType":"56","messageId":"57","endLine":197,"endColumn":18},{"ruleId":"54","severity":1,"message":"76","line":240,"column":10,"nodeType":"56","messageId":"57","endLine":240,"endColumn":18},{"ruleId":"54","severity":1,"message":"77","line":286,"column":10,"nodeType":"56","messageId":"57","endLine":286,"endColumn":18},{"ruleId":"54","severity":1,"message":"78","line":315,"column":10,"nodeType":"56","messageId":"57","endLine":315,"endColumn":18},{"ruleId":"54","severity":1,"message":"55","line":4,"column":8,"nodeType":"56","messageId":"57","endLine":4,"endColumn":17},{"ruleId":"69","severity":1,"message":"70","line":88,"column":5,"nodeType":"71","endLine":88,"endColumn":9},{"ruleId":"54","severity":1,"message":"72","line":96,"column":7,"nodeType":"56","messageId":"57","endLine":96,"endColumn":25},{"ruleId":"69","severity":1,"message":"70","line":109,"column":5,"nodeType":"71","endLine":109,"endColumn":9},{"ruleId":"54","severity":1,"message":"73","line":126,"column":10,"nodeType":"56","messageId":"57","endLine":126,"endColumn":21},{"ruleId":"54","severity":1,"message":"74","line":141,"column":10,"nodeType":"56","messageId":"57","endLine":141,"endColumn":21},{"ruleId":"54","severity":1,"message":"75","line":185,"column":10,"nodeType":"56","messageId":"57","endLine":185,"endColumn":18},{"ruleId":"54","severity":1,"message":"76","line":227,"column":10,"nodeType":"56","messageId":"57","endLine":227,"endColumn":18},{"ruleId":"54","severity":1,"message":"77","line":273,"column":10,"nodeType":"56","messageId":"57","endLine":273,"endColumn":18},"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'match' is assigned a value but never used.","no-native-reassign",["79"],"no-negated-in-lhs",["80"],["79"],["80"],"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","ThisExpression","'ErrorBoundaryIdeal' is defined but never used.","'dynamicList' is defined but never used.","'DynamicList' is defined but never used.","'NewTask2' is defined but never used.","'NewTask3' is defined but never used.","'NewTask4' is defined but never used.","'NewTask5' is defined but never used.","no-global-assign","no-unsafe-negation"]