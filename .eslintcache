[{"/home/administrator/dev/demo0/src/App.js":"1","/home/administrator/dev/demo0/src/index.js":"2","/home/administrator/dev/demo0/src/reportWebVitals.js":"3"},{"size":5888,"mtime":1606869309978,"results":"4","hashOfConfig":"5"},{"size":500,"mtime":1606730782644,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1606730782644,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"tnrwql",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/administrator/dev/demo0/src/App.js",["15","16","17","18","19","20","21","22"],"import React, { useState, useEffect } from 'react';\nimport { Formik, useFormik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\nimport './App.css';\n\n// const App2 = props => {\nfunction App(props) {\n\n    const [openTasks,setOpenTasks] = useState(3);\n    const [done,setDone]           = useState(Array(3).fill(false));\n    const [tasks,setTasks]         = useState(Array(3).fill(null));\n\n\n    useEffect( function onRender() {\n      document.title = `${openTasks} Aufgaben offen`;\n      return function cleanup() {}\n    } );\n    /*\n    useEffect( function onRender() {\n      document.title = `${openTasks} Aufgaben offen`;\n    } );\n    */\n    const toggleState = taskID => {\n      done[taskID] = !done[taskID];\n      setDone(done);\n      setOpenTasks(openTasks + ( done[taskID] ? -1 : 1 ) );\n    };\n\n    const handleNewTask = (newTask) => {\n      tasks.push(newTask);\n      setTasks(tasks);\n      setOpenTasks(openTasks + 1);\n      done.push(false);\n      setDone(done);\n    };\n\n    return (\n      <ErrorBoundary\n        done={done}\n        toggleState={toggleState}\n        tasks={tasks}\n        handleNewTask={handleNewTask}\n        openTasks={openTasks}\n        />\n    );\n}\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div> Error! </div>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <h1>ToDos ({this.props.openTasks} offen)</h1>\n          <TaskList\n            done={this.props.done}\n            toggleState={this.props.toggleState}\n            tasks={this.props.tasks}\n          />\n          <NewTask \n            handleNewTask={this.props.handleNewTask}\n          />\n        </React.Fragment>\n      );\n    }\n  }\n  componentDidCatch(error,errorInfo) {\n    this.state = { hasError: true };\n  }\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n}\n\n\nclass ErrorBoundaryIdeal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n  render() {\n    return (\n      <TaskList { ...this.props } />\n    );\n  }\n  componentDidCatch(error,errorInfo) {\n    this.state = { hasError: true };\n  }\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n}\n/*\nclass ToDo {\n  description;\n  dueDate;\n  isDone;\n}\n*/\n\nfunction TaskList(props) {\n  const tasks = props.tasks.map( (task,taskID) => {\n    return (\n      <Task taskID       = { taskID }\n            done         = { props.done[taskID] }\n            clickHandler = { () => { props.toggleState(taskID) } } />\n    );\n  });\n\n  return (<ul> {tasks} </ul>);\n}\n\nfunction Task(props) {\n    const isChecked    = props.done ? \"checked\" : \"\";\n    return (\n      <li>\n        {props.taskID}\n        <label>\n          <input type=\"checkbox\" checked={isChecked} onClick={props.clickHandler} />\n        </label>\n        <span>Aufgabe</span>\n      </li>\n    );\n}\n\n\nfunction NewTask2(props) {\n\n  const [currentText,setText] = useState(\"\");\n\n  return (\n    <footer>\n      <label>\n      Neu:\n        <input type=\"text\" value={ currentText } onChange={ (event) => setText(event.target.value) } />\n      </label>\n      <button onClick={ () => props.handleNewTask(currentText) } >+</button>\n    </footer>\n  );\n}\n\nfunction NewTask3(props) {\n\n  const validate = (values) => {\n    const errors = {};\n    if (values.todoName.length < 6) {\n      errors.todoName = 'Name zu kurz';\n    }\n    if (!/^[a-zA-Z]*$/i.test(values.todoName)) {\n      errors.somethingRandom = 'Darf nur aus Buchstaben bestehen';\n    }\n    return errors;\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      todoName: \"\",\n    },\n    validate,\n    onSubmit: (values) => {\n      props.handleNewTask(values.todoName);\n    },\n  });\n\n  return (\n    <form onSubmit={ formik.handleSubmit } >\n      <label>\n      { formik.errors.todoName\n        ? <div class=\"error\"> { formik.errors.todoName } </div>\n        : null\n      }\n      { formik.errors.somethingRandom\n        ? <div class=\"error\"> { formik.errors.somethingRandom } </div>\n        : null\n      }\n      Neu:\n        <input type=\"text\"\n               name=\"todoName\"\n               value={ formik.values.todoName }\n               onChange={ formik.handleChange }\n               onBlur={ formik.handleBlur }/>\n      </label>\n      <button type=\"submit\">+</button>\n    </form>\n  );\n}\n\nfunction NewTask4(props) {\n\n  const formik = useFormik({\n    initialValues: {\n      todoName: \"\",\n    },\n    validationSchema: Yup.object({\n      todoName: Yup.string().min(7,'Zu kurz').required('muss angegeben werden'),\n    }),\n    onSubmit: (values) => {\n      props.handleNewTask(values.todoName);\n    },\n  });\n\n  return (\n    <form onSubmit={ formik.handleSubmit } >\n      <label>\n      { formik.touched.todoName && formik.errors.todoName\n        ? <div class=\"error\"> { formik.errors.todoName } </div>\n        : null\n      }\n      Neu:\n        <input { ...formik.getFieldProps('todoName') } />\n      </label>\n      <button type=\"submit\">+</button>\n    </form>\n  );\n}\n\nfunction NewTask(props) {\n\n  throw new Error('bang');\n\n  return (\n    <Formik\n      initialValues= { {\n         todoName: \"\",\n        }}\n      validationSchema= {\n        Yup.object({\n          todoName: Yup.string().min(7,'Zu kurz').required('muss angegeben werden'),\n        }) }\n      onSubmit= {\n        (values) => { props.handleNewTask(values.todoName); }\n      }\n    >\n    { formik => (\n        <Form>\n          <div class=\"error\">\n            <ErrorMessage name=\"todoName\"/>\n            }\n          </div>\n          <label htmlForm=\"todoName\">Neu:</label>\n          <Field name=\"todoName\" type=\"text\" />\n          <button type=\"submit\">+</button>\n        </Form>\n    ) }\n    </Formik>\n  );\n}\n\nexport default App;\n","/home/administrator/dev/demo0/src/index.js",[],"/home/administrator/dev/demo0/src/reportWebVitals.js",[],{"ruleId":"23","severity":1,"message":"24","line":4,"column":8,"nodeType":"25","messageId":"26","endLine":4,"endColumn":17},{"ruleId":"27","severity":1,"message":"28","line":78,"column":5,"nodeType":"29","endLine":78,"endColumn":9},{"ruleId":"23","severity":1,"message":"30","line":86,"column":7,"nodeType":"25","messageId":"26","endLine":86,"endColumn":25},{"ruleId":"27","severity":1,"message":"28","line":99,"column":5,"nodeType":"29","endLine":99,"endColumn":9},{"ruleId":"23","severity":1,"message":"31","line":139,"column":10,"nodeType":"25","messageId":"26","endLine":139,"endColumn":18},{"ruleId":"23","severity":1,"message":"32","line":154,"column":10,"nodeType":"25","messageId":"26","endLine":154,"endColumn":18},{"ruleId":"23","severity":1,"message":"33","line":200,"column":10,"nodeType":"25","messageId":"26","endLine":200,"endColumn":18},{"ruleId":"34","severity":1,"message":"35","line":233,"column":3,"nodeType":"36","messageId":"37","endLine":258,"endColumn":5},"no-unused-vars","'PropTypes' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","ThisExpression","'ErrorBoundaryIdeal' is defined but never used.","'NewTask2' is defined but never used.","'NewTask3' is defined but never used.","'NewTask4' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode"]